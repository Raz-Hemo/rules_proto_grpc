###############################################################################
# @generated
# This file is auto-generated by the cargo-bazel tool.
#
# DO NOT MODIFY: Local changes may be replaced in future executions.
###############################################################################

load(
    "@bazel_skylib//lib:selects.bzl",
    "selects",
)

# buildifier: disable=bzl-visibility
load("@rules_rust//crate_universe/private:selects.bzl", "select_with_or")
load(
    "@rules_rust//rust:defs.bzl",
    "rust_library",
)

package(default_visibility = ["//visibility:public"])

# licenses([
#     "TODO",  # MIT
# ])

rust_library(
    name = "tonic",
    srcs = glob(
        include = [
            "**/*.rs",
        ],
        exclude = [
        ],
    ),
    aliases = selects.with_or({
        "//conditions:default": {
            "@crate_index__prost-0.10.4//:prost": "prost1",
        },
    }),
    compile_data = glob(["**"]) + select_with_or({
        "//conditions:default": [
        ],
    }),
    crate_features = [
        "async-trait",
        "axum",
        "channel",
        "codegen",
        "compression",
        "default",
        "flate2",
        "h2",
        "hyper",
        "hyper-timeout",
        "prost",
        "prost-derive",
        "prost1",
        "tokio",
        "tower",
        "tracing-futures",
        "transport",
    ],
    crate_root = "src/lib.rs",
    data = select_with_or({
        "//conditions:default": [
        ],
    }),
    edition = "2018",
    proc_macro_deps = [
    ] + select_with_or({
        "//conditions:default": [
            "@crate_index__async-trait-0.1.56//:async_trait",
            "@crate_index__prost-derive-0.10.1//:prost_derive",
        ],
    }),
    rustc_env = {
    },
    rustc_env_files = select_with_or({
        "//conditions:default": [
        ],
    }),
    rustc_flags = [
        # In most cases, warnings in 3rd party crates are not interesting as
        # they're out of the control of consumers. The flag here silences
        # warnings. For more details see:
        # https://doc.rust-lang.org/rustc/lints/levels.html
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-bazel",
        "manual",
        "noclippy",
        "norustfmt",
    ],
    version = "0.7.2",
    deps = [
    ] + select_with_or({
        "//conditions:default": [
            "@crate_index__async-stream-0.3.3//:async_stream",
            "@crate_index__axum-0.5.9//:axum",
            "@crate_index__base64-0.13.0//:base64",
            "@crate_index__bytes-1.1.0//:bytes",
            "@crate_index__flate2-1.0.24//:flate2",
            "@crate_index__futures-core-0.3.21//:futures_core",
            "@crate_index__futures-util-0.3.21//:futures_util",
            "@crate_index__h2-0.3.13//:h2",
            "@crate_index__http-0.2.8//:http",
            "@crate_index__http-body-0.4.5//:http_body",
            "@crate_index__hyper-0.14.19//:hyper",
            "@crate_index__hyper-timeout-0.4.1//:hyper_timeout",
            "@crate_index__percent-encoding-2.1.0//:percent_encoding",
            "@crate_index__pin-project-1.0.10//:pin_project",
            "@crate_index__prost-0.10.4//:prost",
            "@crate_index__tokio-1.19.2//:tokio",
            "@crate_index__tokio-stream-0.1.9//:tokio_stream",
            "@crate_index__tokio-util-0.7.3//:tokio_util",
            "@crate_index__tower-0.4.13//:tower",
            "@crate_index__tower-layer-0.3.1//:tower_layer",
            "@crate_index__tower-service-0.3.2//:tower_service",
            "@crate_index__tracing-0.1.35//:tracing",
            "@crate_index__tracing-futures-0.2.5//:tracing_futures",
        ],
    }),
)
