###############################################################################
# @generated
# This file is auto-generated by the cargo-bazel tool.
#
# DO NOT MODIFY: Local changes may be replaced in future executions.
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependnecies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({_CONDITIONS[condition]: deps.values()})

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": common_items}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        if condition_triples in crate_aliases:
            crate_aliases[condition_triples].update(deps)
        else:
            crate_aliases.update({_CONDITIONS[condition]: dict(deps.items() + common_items)})

    return selects.with_or(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "async-stream": "@crate_index__async-stream-0.3.3//:async_stream",
            "futures": "@crate_index__futures-0.3.21//:futures",
            "prost": "@crate_index__prost-0.10.4//:prost",
            "prost-types": "@crate_index__prost-types-0.10.1//:prost_types",
            "protoc-gen-prost": "@crate_index__protoc-gen-prost-0.1.4//:protoc_gen_prost",
            "protoc-gen-tonic": "@crate_index__protoc-gen-tonic-0.1.1//:protoc_gen_tonic",
            "rand": "@crate_index__rand-0.8.5//:rand",
            "serde": "@crate_index__serde-1.0.137//:serde",
            "serde_json": "@crate_index__serde_json-1.0.81//:serde_json",
            "tokio": "@crate_index__tokio-1.19.2//:tokio",
            "tokio-stream": "@crate_index__tokio-stream-0.1.9//:tokio_stream",
            "tonic": "@crate_index__tonic-0.7.2//:tonic",
            "tonic-build": "@crate_index__tonic-build-0.7.2//:tonic_build",
        },
    },
}

_NORMAL_ALIASES = {
    "": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "": {
    },
}

_NORMAL_DEV_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "prost-derive": "@crate_index__prost-derive-0.10.1//:prost_derive",
        },
    },
}

_PROC_MACRO_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "": {
    },
}

_BUILD_DEPENDENCIES = {
    "": {
    },
}

_BUILD_ALIASES = {
    "": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "": {
    },
}

_CONDITIONS = {
    "aarch64-pc-windows-msvc": [],
    "aarch64-uwp-windows-msvc": [],
    "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))": ["wasm32-unknown-unknown", "wasm32-wasi"],
    "cfg(any(unix, target_os = \"wasi\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(target_arch = \"wasm32\")": ["wasm32-unknown-unknown", "wasm32-wasi"],
    "cfg(target_os = \"redox\")": [],
    "cfg(target_os = \"wasi\")": ["wasm32-wasi"],
    "cfg(unix)": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(windows)": ["i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "i686-pc-windows-gnu": [],
    "i686-pc-windows-msvc": ["i686-pc-windows-msvc"],
    "i686-uwp-windows-gnu": [],
    "i686-uwp-windows-msvc": [],
    "x86_64-pc-windows-gnu": [],
    "x86_64-pc-windows-msvc": ["x86_64-pc-windows-msvc"],
    "x86_64-uwp-windows-gnu": [],
    "x86_64-uwp-windows-msvc": [],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates"""
    maybe(
        http_archive,
        name = "crate_index__adler-1.0.2",
        sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/adler/1.0.2/download"],
        strip_prefix = "adler-1.0.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.adler-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__anyhow-1.0.58",
        sha256 = "bb07d2053ccdbe10e2af2995a2f116c1330396493dc1269f6a91d0ae82e19704",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/anyhow/1.0.58/download"],
        strip_prefix = "anyhow-1.0.58",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.anyhow-1.0.58.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__async-stream-0.3.3",
        sha256 = "dad5c83079eae9969be7fadefe640a1c566901f05ff91ab221de4b6f68d9507e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/async-stream/0.3.3/download"],
        strip_prefix = "async-stream-0.3.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.async-stream-0.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__async-stream-impl-0.3.3",
        sha256 = "10f203db73a71dfa2fb6dd22763990fa26f3d2625a6da2da900d23b87d26be27",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/async-stream-impl/0.3.3/download"],
        strip_prefix = "async-stream-impl-0.3.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.async-stream-impl-0.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__async-trait-0.1.56",
        sha256 = "96cf8829f67d2eab0b2dfa42c5d0ef737e0724e4a82b01b3e292456202b19716",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/async-trait/0.1.56/download"],
        strip_prefix = "async-trait-0.1.56",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.async-trait-0.1.56.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__autocfg-1.1.0",
        sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/autocfg/1.1.0/download"],
        strip_prefix = "autocfg-1.1.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.autocfg-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__axum-0.5.9",
        sha256 = "33d590cacd53140ff87cc2e192eb22fc3dc23c5b3f93b0d4f020677f98e8c629",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/axum/0.5.9/download"],
        strip_prefix = "axum-0.5.9",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.axum-0.5.9.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__axum-core-0.2.6",
        sha256 = "cf4d047478b986f14a13edad31a009e2e05cb241f9805d0d75e4cba4e129ad4d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/axum-core/0.2.6/download"],
        strip_prefix = "axum-core-0.2.6",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.axum-core-0.2.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__base64-0.13.0",
        sha256 = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/base64/0.13.0/download"],
        strip_prefix = "base64-0.13.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.base64-0.13.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__bytes-1.1.0",
        sha256 = "c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bytes/1.1.0/download"],
        strip_prefix = "bytes-1.1.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.bytes-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__cc-1.0.73",
        sha256 = "2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cc/1.0.73/download"],
        strip_prefix = "cc-1.0.73",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.cc-1.0.73.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__cmake-0.1.48",
        sha256 = "e8ad8cef104ac57b68b89df3208164d228503abbdce70f6880ffa3d970e7443a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cmake/0.1.48/download"],
        strip_prefix = "cmake-0.1.48",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.cmake-0.1.48.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__crc32fast-1.3.2",
        sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/crc32fast/1.3.2/download"],
        strip_prefix = "crc32fast-1.3.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.crc32fast-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__either-1.6.1",
        sha256 = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/either/1.6.1/download"],
        strip_prefix = "either-1.6.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.either-1.6.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__fastrand-1.7.0",
        sha256 = "c3fcf0cee53519c866c09b5de1f6c56ff9d647101f81c1964fa632e148896cdf",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fastrand/1.7.0/download"],
        strip_prefix = "fastrand-1.7.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.fastrand-1.7.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__fixedbitset-0.4.1",
        sha256 = "279fb028e20b3c4c320317955b77c5e0c9701f05a1d309905d6fc702cdc5053e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fixedbitset/0.4.1/download"],
        strip_prefix = "fixedbitset-0.4.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.fixedbitset-0.4.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__flate2-1.0.24",
        sha256 = "f82b0f4c27ad9f8bfd1f3208d882da2b09c301bc1c828fd3a00d0216d2fbbff6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/flate2/1.0.24/download"],
        strip_prefix = "flate2-1.0.24",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.flate2-1.0.24.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__fnv-1.0.7",
        sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fnv/1.0.7/download"],
        strip_prefix = "fnv-1.0.7",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.fnv-1.0.7.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-0.3.21",
        sha256 = "f73fe65f54d1e12b726f517d3e2135ca3125a437b6d998caf1962961f7172d9e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures/0.3.21/download"],
        strip_prefix = "futures-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-channel-0.3.21",
        sha256 = "c3083ce4b914124575708913bca19bfe887522d6e2e6d0952943f5eac4a74010",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-channel/0.3.21/download"],
        strip_prefix = "futures-channel-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-channel-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-core-0.3.21",
        sha256 = "0c09fd04b7e4073ac7156a9539b57a484a8ea920f79c7c675d05d289ab6110d3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-core/0.3.21/download"],
        strip_prefix = "futures-core-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-core-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-executor-0.3.21",
        sha256 = "9420b90cfa29e327d0429f19be13e7ddb68fa1cccb09d65e5706b8c7a749b8a6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-executor/0.3.21/download"],
        strip_prefix = "futures-executor-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-executor-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-io-0.3.21",
        sha256 = "fc4045962a5a5e935ee2fdedaa4e08284547402885ab326734432bed5d12966b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-io/0.3.21/download"],
        strip_prefix = "futures-io-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-io-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-macro-0.3.21",
        sha256 = "33c1e13800337f4d4d7a316bf45a567dbcb6ffe087f16424852d97e97a91f512",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-macro/0.3.21/download"],
        strip_prefix = "futures-macro-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-macro-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-sink-0.3.21",
        sha256 = "21163e139fa306126e6eedaf49ecdb4588f939600f0b1e770f4205ee4b7fa868",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-sink/0.3.21/download"],
        strip_prefix = "futures-sink-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-sink-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-task-0.3.21",
        sha256 = "57c66a976bf5909d801bbef33416c41372779507e7a6b3a5e25e4749c58f776a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-task/0.3.21/download"],
        strip_prefix = "futures-task-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-task-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__futures-util-0.3.21",
        sha256 = "d8b7abd5d659d9b90c8cba917f6ec750a74e2dc23902ef9cd4cc8c8b22e6036a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-util/0.3.21/download"],
        strip_prefix = "futures-util-0.3.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-util-0.3.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__getrandom-0.2.7",
        sha256 = "4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/getrandom/0.2.7/download"],
        strip_prefix = "getrandom-0.2.7",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.getrandom-0.2.7.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__h2-0.3.13",
        sha256 = "37a82c6d637fc9515a4694bbf1cb2457b79d81ce52b3108bdeea58b07dd34a57",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/h2/0.3.13/download"],
        strip_prefix = "h2-0.3.13",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.h2-0.3.13.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__hashbrown-0.12.1",
        sha256 = "db0d4cf898abf0081f964436dc980e96670a0f36863e4b83aaacdb65c9d7ccc3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hashbrown/0.12.1/download"],
        strip_prefix = "hashbrown-0.12.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.hashbrown-0.12.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__heck-0.4.0",
        sha256 = "2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/heck/0.4.0/download"],
        strip_prefix = "heck-0.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.heck-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__http-0.2.8",
        sha256 = "75f43d41e26995c17e71ee126451dd3941010b0514a81a9d11f3b341debc2399",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/http/0.2.8/download"],
        strip_prefix = "http-0.2.8",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.http-0.2.8.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__http-body-0.4.5",
        sha256 = "d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/http-body/0.4.5/download"],
        strip_prefix = "http-body-0.4.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.http-body-0.4.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__http-range-header-0.3.0",
        sha256 = "0bfe8eed0a9285ef776bb792479ea3834e8b94e13d615c2f66d03dd50a435a29",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/http-range-header/0.3.0/download"],
        strip_prefix = "http-range-header-0.3.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.http-range-header-0.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__httparse-1.7.1",
        sha256 = "496ce29bb5a52785b44e0f7ca2847ae0bb839c9bd28f69acac9b99d461c0c04c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/httparse/1.7.1/download"],
        strip_prefix = "httparse-1.7.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.httparse-1.7.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__httpdate-1.0.2",
        sha256 = "c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/httpdate/1.0.2/download"],
        strip_prefix = "httpdate-1.0.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.httpdate-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__hyper-0.14.19",
        sha256 = "42dc3c131584288d375f2d07f822b0cb012d8c6fb899a5b9fdb3cb7eb9b6004f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hyper/0.14.19/download"],
        strip_prefix = "hyper-0.14.19",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.hyper-0.14.19.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__hyper-timeout-0.4.1",
        sha256 = "bbb958482e8c7be4bc3cf272a766a2b0bf1a6755e7a6ae777f017a31d11b13b1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hyper-timeout/0.4.1/download"],
        strip_prefix = "hyper-timeout-0.4.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.hyper-timeout-0.4.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__indexmap-1.9.1",
        sha256 = "10a35a97730320ffe8e2d410b5d3b69279b98d2c14bdb8b70ea89ecf7888d41e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/indexmap/1.9.1/download"],
        strip_prefix = "indexmap-1.9.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.indexmap-1.9.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__instant-0.1.12",
        sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/instant/0.1.12/download"],
        strip_prefix = "instant-0.1.12",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.instant-0.1.12.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__itertools-0.10.3",
        sha256 = "a9a9d19fa1e79b6215ff29b9d6880b706147f16e9b1dbb1e4e5947b5b02bc5e3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itertools/0.10.3/download"],
        strip_prefix = "itertools-0.10.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.itertools-0.10.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__itoa-1.0.2",
        sha256 = "112c678d4050afce233f4f2852bb2eb519230b3cf12f33585275537d7e41578d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itoa/1.0.2/download"],
        strip_prefix = "itoa-1.0.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.itoa-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__lazy_static-1.4.0",
        sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazy_static/1.4.0/download"],
        strip_prefix = "lazy_static-1.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.lazy_static-1.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__libc-0.2.126",
        sha256 = "349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libc/0.2.126/download"],
        strip_prefix = "libc-0.2.126",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.libc-0.2.126.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__log-0.4.17",
        sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/log/0.4.17/download"],
        strip_prefix = "log-0.4.17",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.log-0.4.17.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__matchit-0.5.0",
        sha256 = "73cbba799671b762df5a175adf59ce145165747bb891505c43d09aefbbf38beb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/matchit/0.5.0/download"],
        strip_prefix = "matchit-0.5.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.matchit-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__memchr-2.5.0",
        sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/memchr/2.5.0/download"],
        strip_prefix = "memchr-2.5.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.memchr-2.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__mime-0.3.16",
        sha256 = "2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/mime/0.3.16/download"],
        strip_prefix = "mime-0.3.16",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.mime-0.3.16.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__miniz_oxide-0.5.3",
        sha256 = "6f5c75688da582b8ffc1f1799e9db273f32133c49e048f614d22ec3256773ccc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/miniz_oxide/0.5.3/download"],
        strip_prefix = "miniz_oxide-0.5.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.miniz_oxide-0.5.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__mio-0.8.4",
        sha256 = "57ee1c23c7c63b0c9250c339ffdc69255f110b298b901b9f6c82547b7b87caaf",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/mio/0.8.4/download"],
        strip_prefix = "mio-0.8.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.mio-0.8.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__multimap-0.8.3",
        sha256 = "e5ce46fe64a9d73be07dcbe690a38ce1b293be448fd8ce1e6c1b8062c9f72c6a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/multimap/0.8.3/download"],
        strip_prefix = "multimap-0.8.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.multimap-0.8.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__once_cell-1.12.0",
        sha256 = "7709cef83f0c1f58f666e746a08b21e0085f7440fa6a29cc194d68aac97a4225",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/once_cell/1.12.0/download"],
        strip_prefix = "once_cell-1.12.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.once_cell-1.12.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__percent-encoding-2.1.0",
        sha256 = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/percent-encoding/2.1.0/download"],
        strip_prefix = "percent-encoding-2.1.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.percent-encoding-2.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__petgraph-0.6.2",
        sha256 = "e6d5014253a1331579ce62aa67443b4a658c5e7dd03d4bc6d302b94474888143",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/petgraph/0.6.2/download"],
        strip_prefix = "petgraph-0.6.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.petgraph-0.6.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__pin-project-1.0.10",
        sha256 = "58ad3879ad3baf4e44784bc6a718a8698867bb991f8ce24d1bcbe2cfb4c3a75e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-project/1.0.10/download"],
        strip_prefix = "pin-project-1.0.10",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-project-1.0.10.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__pin-project-internal-1.0.10",
        sha256 = "744b6f092ba29c3650faf274db506afd39944f48420f6c86b17cfe0ee1cb36bb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-project-internal/1.0.10/download"],
        strip_prefix = "pin-project-internal-1.0.10",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-project-internal-1.0.10.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__pin-project-lite-0.2.9",
        sha256 = "e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-project-lite/0.2.9/download"],
        strip_prefix = "pin-project-lite-0.2.9",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-project-lite-0.2.9.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__pin-utils-0.1.0",
        sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-utils/0.1.0/download"],
        strip_prefix = "pin-utils-0.1.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-utils-0.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__ppv-lite86-0.2.16",
        sha256 = "eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ppv-lite86/0.2.16/download"],
        strip_prefix = "ppv-lite86-0.2.16",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.ppv-lite86-0.2.16.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__prettyplease-0.1.15",
        sha256 = "9e1516508b396cefe095485fdce673007422f5e48e82934b7b423dc26aa5e6a4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prettyplease/0.1.15/download"],
        strip_prefix = "prettyplease-0.1.15",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prettyplease-0.1.15.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__proc-macro2-1.0.40",
        sha256 = "dd96a1e8ed2596c337f8eae5f24924ec83f5ad5ab21ea8e455d3566c69fbcaf7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro2/1.0.40/download"],
        strip_prefix = "proc-macro2-1.0.40",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.proc-macro2-1.0.40.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__prost-0.10.4",
        sha256 = "71adf41db68aa0daaefc69bb30bcd68ded9b9abaad5d1fbb6304c4fb390e083e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost/0.10.4/download"],
        strip_prefix = "prost-0.10.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-0.10.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__prost-build-0.10.4",
        sha256 = "8ae5a4388762d5815a9fc0dea33c56b021cdc8dde0c55e0c9ca57197254b0cab",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-build/0.10.4/download"],
        strip_prefix = "prost-build-0.10.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-build-0.10.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__prost-derive-0.10.1",
        sha256 = "7b670f45da57fb8542ebdbb6105a925fe571b67f9e7ed9f47a06a84e72b4e7cc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-derive/0.10.1/download"],
        strip_prefix = "prost-derive-0.10.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-derive-0.10.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__prost-types-0.10.1",
        sha256 = "2d0a014229361011dc8e69c8a1ec6c2e8d0f2af7c91e3ea3f5b2170298461e68",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-types/0.10.1/download"],
        strip_prefix = "prost-types-0.10.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-types-0.10.1.bazel"),
    )

    maybe(
        new_git_repository,
        name = "crate_index__protoc-gen-prost-0.1.4",
        commit = "706af00ca1df7a8b2f2d77d2bac749144e584e7c",
        init_submodules = True,
        remote = "https://github.com/titanous/protoc-gen-prost",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.protoc-gen-prost-0.1.4.bazel"),
        strip_prefix = "protoc-gen-prost",
    )

    maybe(
        new_git_repository,
        name = "crate_index__protoc-gen-tonic-0.1.1",
        commit = "706af00ca1df7a8b2f2d77d2bac749144e584e7c",
        init_submodules = True,
        remote = "https://github.com/titanous/protoc-gen-prost",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.protoc-gen-tonic-0.1.1.bazel"),
        strip_prefix = "protoc-gen-tonic",
    )

    maybe(
        http_archive,
        name = "crate_index__quote-1.0.20",
        sha256 = "3bcdf212e9776fbcb2d23ab029360416bb1706b1aea2d1a5ba002727cbcab804",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/quote/1.0.20/download"],
        strip_prefix = "quote-1.0.20",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.quote-1.0.20.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__rand-0.8.5",
        sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand/0.8.5/download"],
        strip_prefix = "rand-0.8.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.rand-0.8.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__rand_chacha-0.3.1",
        sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_chacha/0.3.1/download"],
        strip_prefix = "rand_chacha-0.3.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.rand_chacha-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__rand_core-0.6.3",
        sha256 = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_core/0.6.3/download"],
        strip_prefix = "rand_core-0.6.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.rand_core-0.6.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__redox_syscall-0.2.13",
        sha256 = "62f25bc4c7e55e0b0b7a1d43fb893f4fa1361d0abe38b9ce4f323c2adfe6ef42",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/redox_syscall/0.2.13/download"],
        strip_prefix = "redox_syscall-0.2.13",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.redox_syscall-0.2.13.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__regex-1.5.6",
        sha256 = "d83f127d94bdbcda4c8cc2e50f6f84f4b611f69c902699ca385a39c3a75f9ff1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex/1.5.6/download"],
        strip_prefix = "regex-1.5.6",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.regex-1.5.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__regex-syntax-0.6.26",
        sha256 = "49b3de9ec5dc0a3417da371aab17d729997c15010e7fd24ff707773a33bddb64",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex-syntax/0.6.26/download"],
        strip_prefix = "regex-syntax-0.6.26",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.regex-syntax-0.6.26.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__remove_dir_all-0.5.3",
        sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/remove_dir_all/0.5.3/download"],
        strip_prefix = "remove_dir_all-0.5.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.remove_dir_all-0.5.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__ryu-1.0.10",
        sha256 = "f3f6f92acf49d1b98f7a81226834412ada05458b7364277387724a237f062695",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ryu/1.0.10/download"],
        strip_prefix = "ryu-1.0.10",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.ryu-1.0.10.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__serde-1.0.137",
        sha256 = "61ea8d54c77f8315140a05f4c7237403bf38b72704d031543aa1d16abbf517d1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde/1.0.137/download"],
        strip_prefix = "serde-1.0.137",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.serde-1.0.137.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__serde_derive-1.0.137",
        sha256 = "1f26faba0c3959972377d3b2d306ee9f71faee9714294e41bb777f83f88578be",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_derive/1.0.137/download"],
        strip_prefix = "serde_derive-1.0.137",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.serde_derive-1.0.137.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__serde_json-1.0.81",
        sha256 = "9b7ce2b32a1aed03c558dc61a5cd328f15aff2dbc17daad8fb8af04d2100e15c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_json/1.0.81/download"],
        strip_prefix = "serde_json-1.0.81",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.serde_json-1.0.81.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__slab-0.4.6",
        sha256 = "eb703cfe953bccee95685111adeedb76fabe4e97549a58d16f03ea7b9367bb32",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/slab/0.4.6/download"],
        strip_prefix = "slab-0.4.6",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.slab-0.4.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__socket2-0.4.4",
        sha256 = "66d72b759436ae32898a2af0a14218dbf55efde3feeb170eb623637db85ee1e0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/socket2/0.4.4/download"],
        strip_prefix = "socket2-0.4.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.socket2-0.4.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__syn-1.0.98",
        sha256 = "c50aef8a904de4c23c788f104b7dddc7d6f79c647c7c8ce4cc8f73eb0ca773dd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/1.0.98/download"],
        strip_prefix = "syn-1.0.98",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.syn-1.0.98.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__sync_wrapper-0.1.1",
        sha256 = "20518fe4a4c9acf048008599e464deb21beeae3d3578418951a189c235a7a9a8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/sync_wrapper/0.1.1/download"],
        strip_prefix = "sync_wrapper-0.1.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.sync_wrapper-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tempfile-3.3.0",
        sha256 = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tempfile/3.3.0/download"],
        strip_prefix = "tempfile-3.3.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tempfile-3.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tokio-1.19.2",
        sha256 = "c51a52ed6686dd62c320f9b89299e9dfb46f730c7a48e635c19f21d116cb1439",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio/1.19.2/download"],
        strip_prefix = "tokio-1.19.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-1.19.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tokio-io-timeout-1.2.0",
        sha256 = "30b74022ada614a1b4834de765f9bb43877f910cc8ce4be40e89042c9223a8bf",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-io-timeout/1.2.0/download"],
        strip_prefix = "tokio-io-timeout-1.2.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-io-timeout-1.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tokio-macros-1.8.0",
        sha256 = "9724f9a975fb987ef7a3cd9be0350edcbe130698af5b8f7a631e23d42d052484",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-macros/1.8.0/download"],
        strip_prefix = "tokio-macros-1.8.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-macros-1.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tokio-stream-0.1.9",
        sha256 = "df54d54117d6fdc4e4fea40fe1e4e566b3505700e148a6827e59b34b0d2600d9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-stream/0.1.9/download"],
        strip_prefix = "tokio-stream-0.1.9",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-stream-0.1.9.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tokio-util-0.7.3",
        sha256 = "cc463cd8deddc3770d20f9852143d50bf6094e640b485cb2e189a2099085ff45",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-util/0.7.3/download"],
        strip_prefix = "tokio-util-0.7.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-util-0.7.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tonic-0.7.2",
        sha256 = "5be9d60db39854b30b835107500cf0aca0b0d14d6e1c3de124217c23a29c2ddb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tonic/0.7.2/download"],
        strip_prefix = "tonic-0.7.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tonic-0.7.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tonic-build-0.7.2",
        sha256 = "d9263bf4c9bfaae7317c1c2faf7f18491d2fe476f70c414b73bf5d445b00ffa1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tonic-build/0.7.2/download"],
        strip_prefix = "tonic-build-0.7.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tonic-build-0.7.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tower-0.4.13",
        sha256 = "b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower/0.4.13/download"],
        strip_prefix = "tower-0.4.13",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-0.4.13.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tower-http-0.3.4",
        sha256 = "3c530c8675c1dbf98facee631536fa116b5fb6382d7dd6dc1b118d970eafe3ba",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower-http/0.3.4/download"],
        strip_prefix = "tower-http-0.3.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-http-0.3.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tower-layer-0.3.1",
        sha256 = "343bc9466d3fe6b0f960ef45960509f84480bf4fd96f92901afe7ff3df9d3a62",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower-layer/0.3.1/download"],
        strip_prefix = "tower-layer-0.3.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-layer-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tower-service-0.3.2",
        sha256 = "b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower-service/0.3.2/download"],
        strip_prefix = "tower-service-0.3.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-service-0.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tracing-0.1.35",
        sha256 = "a400e31aa60b9d44a52a8ee0343b5b18566b03a8321e0d321f695cf56e940160",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing/0.1.35/download"],
        strip_prefix = "tracing-0.1.35",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-0.1.35.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tracing-attributes-0.1.21",
        sha256 = "cc6b8ad3567499f98a1db7a752b07a7c8c7c7c34c332ec00effb2b0027974b7c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing-attributes/0.1.21/download"],
        strip_prefix = "tracing-attributes-0.1.21",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-attributes-0.1.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tracing-core-0.1.28",
        sha256 = "7b7358be39f2f274f322d2aaed611acc57f382e8eb1e5b48cb9ae30933495ce7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing-core/0.1.28/download"],
        strip_prefix = "tracing-core-0.1.28",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-core-0.1.28.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__tracing-futures-0.2.5",
        sha256 = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing-futures/0.2.5/download"],
        strip_prefix = "tracing-futures-0.2.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-futures-0.2.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__try-lock-0.2.3",
        sha256 = "59547bce71d9c38b83d9c0e92b6066c4253371f15005def0c30d9657f50c7642",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/try-lock/0.2.3/download"],
        strip_prefix = "try-lock-0.2.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.try-lock-0.2.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__unicode-ident-1.0.1",
        sha256 = "5bd2fe26506023ed7b5e1e315add59d6f584c621d037f9368fea9cfb988f368c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-ident/1.0.1/download"],
        strip_prefix = "unicode-ident-1.0.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.unicode-ident-1.0.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__want-0.3.0",
        sha256 = "1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/want/0.3.0/download"],
        strip_prefix = "want-0.3.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.want-0.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__wasi-0.11.0-wasi-snapshot-preview1",
        sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasi/0.11.0+wasi-snapshot-preview1/download"],
        strip_prefix = "wasi-0.11.0+wasi-snapshot-preview1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.wasi-0.11.0+wasi-snapshot-preview1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__which-4.2.5",
        sha256 = "5c4fb54e6113b6a8772ee41c3404fb0301ac79604489467e0a9ce1f3e97c24ae",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/which/4.2.5/download"],
        strip_prefix = "which-4.2.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.which-4.2.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__winapi-0.3.9",
        sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi/0.3.9/download"],
        strip_prefix = "winapi-0.3.9",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.winapi-0.3.9.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__winapi-i686-pc-windows-gnu-0.4.0",
        sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-i686-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-i686-pc-windows-gnu-0.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.winapi-i686-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__winapi-x86_64-pc-windows-gnu-0.4.0",
        sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-x86_64-pc-windows-gnu-0.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.winapi-x86_64-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__windows-sys-0.36.1",
        sha256 = "ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-sys/0.36.1/download"],
        strip_prefix = "windows-sys-0.36.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows-sys-0.36.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__windows_aarch64_msvc-0.36.1",
        sha256 = "9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_msvc/0.36.1/download"],
        strip_prefix = "windows_aarch64_msvc-0.36.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_aarch64_msvc-0.36.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__windows_i686_gnu-0.36.1",
        sha256 = "180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_gnu/0.36.1/download"],
        strip_prefix = "windows_i686_gnu-0.36.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_i686_gnu-0.36.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__windows_i686_msvc-0.36.1",
        sha256 = "e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_msvc/0.36.1/download"],
        strip_prefix = "windows_i686_msvc-0.36.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_i686_msvc-0.36.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__windows_x86_64_gnu-0.36.1",
        sha256 = "4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnu/0.36.1/download"],
        strip_prefix = "windows_x86_64_gnu-0.36.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_x86_64_gnu-0.36.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crate_index__windows_x86_64_msvc-0.36.1",
        sha256 = "c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_msvc/0.36.1/download"],
        strip_prefix = "windows_x86_64_msvc-0.36.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_x86_64_msvc-0.36.1.bazel"),
    )
